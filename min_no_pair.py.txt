# Python3 implementation of the approach 
from collections import defaultdict, deque 

# Function which will check if there is 
# a path between a and b by using BFS 
def Check_Path(a, b, G): 
	visited = defaultdict(bool) 
	queue = deque() 
	queue.append(a) 
	visited[a]= True
	while queue: 
		n = queue.popleft() 
		if n == b: 
			return True
		for i in list(G[n]): 
			if visited[i]== False: 
				queue.append(i) 
				visited[i]= True
	return False

# Function to return the minimum number of pairs 
def countPairs(s1, s2, G): 
	name = defaultdict(bool) 
	
	# To store the count of pairs 
	count = 0

	# Iterating through the strings 
	for i in range(x): 
		a = s1[i] 
		b = s2[i] 

		# Check if we can add an edge in the graph 
		if a in G and b not in G and a != b: 
			G[a].append(b) 
			G[b].append(a) 
			count+= 1
		elif b in G and a not in G and a != b: 
			G[b].append(a) 
			G[a].append(b) 
			count+= 1
		elif a not in G and b not in G and a != b: 
			G[a].append(b) 
			G[b].append(a) 
			count+= 1
		else: 
			if not Check_Path(a, b, G) and a != b: 
				G[a].append(b) 
				G[b].append(a) 
				count+= 1

	# Return the count of pairs 
	return count 

# Driver code 
if __name__=="__main__": 
	s1 ="abb"
	s2 ="dad"
	x = len(s1) 
	G = defaultdict(list) 
	print(countPairs(s1, s2, G)) 
